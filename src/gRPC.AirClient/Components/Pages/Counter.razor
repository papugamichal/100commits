@page "/counter"
@using AirQ.Consumer
@using Grpc.Core
@using Grpc.Net.Client
@using System.Threading.Channels
@rendermode InteractiveServer

@implements IDisposable

<PageTitle>Counter</PageTitle>
<h1>Counter</h1>
<p role="status">Current count: @currentCount</p>


<p>Station name</p>
<input type="text" @bind-value="@_stationName" placeholder="Enter station name"/>
<button class="btn btn-primary" @onclick="@ReqData">Req</button>
<h1>Air metrics</h1>
@if (_response is not null)
{
    <p>@($"Received: {_received}")</p>
    <br/>
    <p>@($"Humidity: {_response.Humidity}")</p>
    <p>@($"No2: {_response.No2}")</p>
    <p>@($"So2: {_response.So2}")</p>
    <p>@($"Pm10: {_response.Pm10}")</p>
    <p>@($"Temperature: {_response.Temperature}")</p>
    <p>@($"Pressure: {_response.Pressure}")</p>
}
else
{
    <p>Waiting for data</p>
}

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private string _stationName;
    private int currentCount = 0;
    
    private AirQMetrics? _response;
    private DateTimeOffset _received = DateTimeOffset.Now;

    private CancellationTokenSource? _cts;
    private Task? _clientTask;

    private Channel<string> _stationNameChannel = Channel.CreateUnbounded<string>();
    
    protected override void OnInitialized()
    {
        _cts = new CancellationTokenSource();
        _clientTask = InitializeClientThreadAsync(_cts.Token);
    }

    private Task InitializeClientThreadAsync(CancellationToken token)
    {
        return Task.Run(async () =>
        {
            try
            {
                using var channel = GrpcChannel.ForAddress("https://localhost:5555");
                await channel.ConnectAsync(token);

                var consumer = new AirQConsumer.AirQConsumerClient(channel);
                /*var request = consumer.StreamUpdates(new StreamRequest()
                {
                    StationName = "Krakow"
                });

                await foreach (var response in request.ResponseStream.ReadAllAsync(token))
                {
                    _response = response;
                    _received = DateTimeOffset.Now;
                    await InvokeAsync(StateHasChanged);
                }*/

                var biDirectionalStream = consumer.GetBidirectionalUpdatesStream();
                var publisher = Task.Run(async () =>
                {
                    await foreach (var item in _stationNameChannel.Reader.ReadAllAsync(token))
                    {
                        await biDirectionalStream.RequestStream.WriteAsync(new StreamRequest() { StationName = item }, token);
                    }
                });

                var receiver = Task.Run(async () =>
                {
                    await foreach (var item in biDirectionalStream.ResponseStream.ReadAllAsync(cancellationToken: token))
                    {
                        _response = item;
                        _received = DateTimeOffset.Now;
                        await InvokeAsync(StateHasChanged);
                    }
                    
                });

                await Task.WhenAll(publisher, receiver);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }, token);
    }


    private async Task ReqData()
    {
        await _stationNameChannel.Writer.WriteAsync(_stationName);
    }
    
    private void IncrementCount()
    {
        currentCount++;
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _clientTask?.Wait();
    }

}