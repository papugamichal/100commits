@page "/counter"
@using Grpc.Net.Client
@using Grpc.Core
@using AirQ.Consumer
@rendermode InteractiveServer

@implements IDisposable

<PageTitle>Counter</PageTitle>
<h1>Counter</h1>
<p role="status">Current count: @currentCount</p>

<h1>Air metrics</h1>
@if (_response is not null)
{
    <p>@($"Received: {_received}")</p>
    <br/>
    <p>@($"Humidity: {_response.Humidity}")</p>
    <p>@($"No2: {_response.No2}")</p>
    <p>@($"So2: {_response.So2}")</p>
    <p>@($"Pm10: {_response.Pm10}")</p>
    <p>@($"Temperature: {_response.Temperature}")</p>
    <p>@($"Pressure: {_response.Pressure}")</p>
}
else
{
    <p>Waiting for data</p>
}


<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    
    private AirQMetrics? _response;
    private DateTimeOffset _received = DateTimeOffset.Now;

    private CancellationTokenSource? _cts;
    private Task? _clientTask;

    protected override void OnInitialized()
    {
        _cts = new CancellationTokenSource();
        _clientTask = InitializeClientThreadAsync(_cts.Token);
    }

    private Task InitializeClientThreadAsync(CancellationToken token)
    {
        return Task.Run(async () =>
        {
            try
            {
                using var channel = GrpcChannel.ForAddress("https://localhost:5555");
                await channel.ConnectAsync(token);

                var consumer = new AirQConsumer.AirQConsumerClient(channel);
                var request = consumer.StreamUpdates(new StreamRequest()
                {
                    StationName = "Krakow"
                });

                await foreach (var response in request.ResponseStream.ReadAllAsync(token))
                {
                    _response = response;
                    _received = DateTimeOffset.Now;
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }, token);
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _clientTask?.Wait();
    }

}